Df1$week <- Df1$week+1
Df2 <- oj_cross %>% select(c("brand", "store", "week", "price", "logmove", "feat"))
Df3 <- merge(Df1, Df2, by=c("brand","store","week"))
Df3 <- dplyr::rename(Df3, price.thisweek = price.x)
Df3 <- dplyr::rename(Df3, price.lastweek = price.y)
Df3 <- dplyr::rename(Df3, logmove.thisweek = logmove.x)
Df3 <- dplyr::rename(Df3, logmove.lastweek = logmove.y)
Df3 <- dplyr::rename(Df3, feat.thisweek = feat.x)
Df3 <- dplyr::rename(Df3, feat.lastweek = feat.y)
oj_cross <- Df3
oj_cross <- oj_cross %>% select(-c(brand))
oj_cross
oj_cross <- oj_cross %>% select(-c(brand, price.thisweek))
oj_cross <- oj_cross %>% select(-c(price.thisweek))
oj_cross <- oj_cross %>%
mutate(price.lastweek.thisweek = P_Dom*price.lastweek) %>%
mutate(educ.hhlarge.pricethisweek = EDUC*HHLARGE*P_Dom) %>%
mutate(educ.hhlarge = EDUC*HHLARGE) %>%
mutate(hhlarge.price.thisweek = HHLARGE*P_Dom) %>%
mutate(hhlarge.price.thisweek = EDUC*P_Dom) %>%
mutate(brand.feat.thisweek = brand*feat.thisweek) %>%
mutate(price.thisweek.brand = P_Dom*brand)
oj <- read.csv("../oj.csv")
oj_og <- na.omit(oj)
oj$price <- log(oj$price)
oj_prices <-oj[,1:6]
oj_wide <- dcast(oj_prices, store + week ~ brand)
colnames(oj_wide)[3] <- "P_Dom"
colnames(oj_wide)[4] <- "P_MM"
colnames(oj_wide)[5] <- "P_Trop"
oj_cross <- merge(oj, oj_wide, by=c("week","store")) %>% filter(brand == "dominicks")
Df1 <- oj_cross
Df1$week <- Df1$week+1
Df2 <- oj_cross %>% select(c("brand", "store", "week", "price", "logmove", "feat"))
Df3 <- merge(Df1, Df2, by=c("brand","store","week"))
Df3 <- dplyr::rename(Df3, price.thisweek = price.x)
Df3 <- dplyr::rename(Df3, price.lastweek = price.y)
Df3 <- dplyr::rename(Df3, logmove.thisweek = logmove.x)
Df3 <- dplyr::rename(Df3, logmove.lastweek = logmove.y)
Df3 <- dplyr::rename(Df3, feat.thisweek = feat.x)
Df3 <- dplyr::rename(Df3, feat.lastweek = feat.y)
oj_cross <- Df3
oj_cross <- oj_cross %>% select(-c(price.thisweek))
oj_cross <- oj_cross %>%
mutate(price.lastweek.thisweek = P_Dom*price.lastweek) %>%
mutate(educ.hhlarge.pricethisweek = EDUC*HHLARGE*P_Dom) %>%
mutate(educ.hhlarge = EDUC*HHLARGE) %>%
mutate(hhlarge.price.thisweek = HHLARGE*P_Dom) %>%
mutate(educ.price.thisweek = EDUC*P_Dom) %>%
mutate(P_Trop.price.thisweek = P_Trop*P_Dom) %>%
mutate(P_MM.price.thisweek = P_MM*P_Dom) %>%
mutate(P_Dom.feat.thisweek = P_Dom*feat.thisweek) %>%
mutate(P_MM.feat.thisweek = P_MM*feat.thisweek) %>%
mutate(P_Trop.feat.thisweek = P_Trop*feat.thisweek)
dml_data_df = double_ml_data_from_data_frame(oj_cross,
y_col='logmove.thisweek',
d_cols='P_Dom',
x_cols=colnames(oj_cross %>% select(-c(logmove.thisweek, P_Dom))))
set.seed(1)
# Xgboost learners
ml_l_rf = lrn("regr.ranger", max.depth = 7,
mtry = 3, min.node.size =3)
ml_m_rf = lrn("regr.ranger", max.depth = 5,
mtry = 4, min.node.size = 7)
# Default values
dml_plr_rf = DoubleMLPLR$new(dml_data_df,
ml_l = ml_l_rf,
ml_m = ml_m_rf)
# Estimation
dml_plr_rf$fit()
# Coefficient estimate
dml_plr_rf$coef
# Standard error
dml_plr_rf$se
# Summary
dml_plr_rf$summary()
# Summary
dml_plr_rf$summary()
# Confidence intervals
dml_plr_rf$confint()
# Multiplier bootstrap (relevant in case with multiple treatment variables)
dml_plr_rf$bootstrap()
# Simultaneous confidence bands
dml_plr_rf$confint(joint = TRUE)
unique(oj$brand)
D_df = double_ml_data_from_data_frame(oj_D,
y_col='logmove',
d_cols='P_Dom',
x_cols=colnames(oj_cross %>% select(-c(logmove, P_Dom))))
oj_og <- na.omit(oj)
oj$price <- log(oj$price)
oj_prices <-oj[,1:6]
oj_wide <- dcast(oj_prices, store + week ~ brand)
colnames(oj_wide)[3] <- "P_Dom"
colnames(oj_wide)[4] <- "P_MM"
colnames(oj_wide)[5] <- "P_Trop"
oj_D <- merge(oj, oj_wide, by=c("week","store")) %>% filter(brand == "dominicks") %>% select(-c(brand))
oj_T <- merge(oj, oj_wide, by=c("week","store")) %>% filter(brand == "tropicana") %>% select(-c(brand))
oj_M <- merge(oj, oj_wide, by=c("week","store")) %>% filter(brand == "minute.maid") %>% select(-c(brand))
D_df = double_ml_data_from_data_frame(oj_D,
y_col='logmove',
d_cols='P_Dom',
x_cols=colnames(oj_cross %>% select(-c(logmove, P_Dom))))
oj_D
head(oj_D$logmove)
View(oj_M)
colnames(oj_D)
D_df = double_ml_data_from_data_frame(oj_D,
y_col='logmove',
d_cols='P_Dom',
x_cols=colnames(oj_cross %>% select(-c(logmove, P_Dom))))
D_df = double_ml_data_from_data_frame(oj_D,
y_col='logmove',
d_cols='P_Dom',
x_cols=colnames(oj_D %>% select(-c(logmove, P_Dom))))
T_df = double_ml_data_from_data_frame(oj_T,
y_col='logmove',
d_cols='P_Trop',
x_cols=colnames(oj_T %>% select(-c(logmove, P_Trop))))
M_df = double_ml_data_from_data_frame(oj_M,
y_col='logmove',
d_cols='P_MM',
x_cols=colnames(oj_M %>% select(-c(logmove, P_MM))))
set.seed(1)
# Xgboost learners
ml_l_rf = lrn("regr.ranger", max.depth = 7,
mtry = 3, min.node.size =3)
ml_m_rf = lrn("regr.ranger", max.depth = 5,
mtry = 4, min.node.size = 7)
# Default values
D_dml_plr_rf = DoubleMLPLR$new(D_df,
ml_l = ml_l_rf,
ml_m = ml_m_rf)
T_dml_plr_rf = DoubleMLPLR$new(T_df,
ml_l = ml_l_rf,
ml_m = ml_m_rf)
M_dml_plr_rf = DoubleMLPLR$new(M_df,
ml_l = ml_l_rf,
ml_m = ml_m_rf)
# Estimation
D_dml_plr_rf$fit()
oj <- na.omit(oj)
oj$price <- log(oj$price)
oj_prices <-oj[,1:6]
oj_wide <- dcast(oj_prices, store + week ~ brand)
colnames(oj_wide)[3] <- "P_Dom"
colnames(oj_wide)[4] <- "P_MM"
colnames(oj_wide)[5] <- "P_Trop"
oj_D <- merge(oj, oj_wide, by=c("week","store")) %>% filter(brand == "dominicks") %>% select(-c(brand))
oj_T <- merge(oj, oj_wide, by=c("week","store")) %>% filter(brand == "tropicana") %>% select(-c(brand))
oj_M <- merge(oj, oj_wide, by=c("week","store")) %>% filter(brand == "minute.maid") %>% select(-c(brand))
D_df = double_ml_data_from_data_frame(oj_D,
y_col='logmove',
d_cols='P_Dom',
x_cols=colnames(oj_D %>% select(-c(logmove, P_Dom))))
T_df = double_ml_data_from_data_frame(oj_T,
y_col='logmove',
d_cols='P_Trop',
x_cols=colnames(oj_T %>% select(-c(logmove, P_Trop))))
M_df = double_ml_data_from_data_frame(oj_M,
y_col='logmove',
d_cols='P_MM',
x_cols=colnames(oj_M %>% select(-c(logmove, P_MM))))
set.seed(1)
# Xgboost learners
ml_l_rf = lrn("regr.ranger", max.depth = 7,
mtry = 3, min.node.size =3)
ml_m_rf = lrn("regr.ranger", max.depth = 5,
mtry = 4, min.node.size = 7)
# Default values
D_dml_plr_rf = DoubleMLPLR$new(D_df,
ml_l = ml_l_rf,
ml_m = ml_m_rf)
T_dml_plr_rf = DoubleMLPLR$new(T_df,
ml_l = ml_l_rf,
ml_m = ml_m_rf)
M_dml_plr_rf = DoubleMLPLR$new(M_df,
ml_l = ml_l_rf,
ml_m = ml_m_rf)
# Estimation
D_dml_plr_rf$fit()
oj_cross <- merge(oj, oj_wide, by=c("week","store")) %>% drop.na()
oj_cross <- merge(oj, oj_wide, by=c("week","store")) %>% na.omit()
oj <- na.omit(oj)
oj$price <- log(oj$price)
oj_prices <-oj[,1:6]
oj_wide <- dcast(oj_prices, store + week ~ brand)
colnames(oj_wide)[3] <- "P_Dom"
colnames(oj_wide)[4] <- "P_MM"
colnames(oj_wide)[5] <- "P_Trop"
oj <- read.csv("../oj.csv")
oj <- na.omit(oj)
oj$price <- log(oj$price)
oj_prices <-oj[,1:6]
oj_wide <- dcast(oj_prices, store + week ~ brand)
colnames(oj_wide)[3] <- "P_Dom"
colnames(oj_wide)[4] <- "P_MM"
colnames(oj_wide)[5] <- "P_Trop"
oj_cross <- merge(oj, oj_wide, by=c("week","store")) %>% na.omit()
oj_D <- oj_cross %>% filter(brand == "dominicks") %>% select(-c(brand))
oj_T <- oj_cross %>%  filter(brand == "tropicana") %>% select(-c(brand))
oj_M <- oj_cross %>% filter(brand == "minute.maid") %>% select(-c(brand))
D_df = double_ml_data_from_data_frame(oj_D,
y_col='logmove',
d_cols='P_Dom',
x_cols=colnames(oj_D %>% select(-c(logmove, P_Dom))))
T_df = double_ml_data_from_data_frame(oj_T,
y_col='logmove',
d_cols='P_Trop',
x_cols=colnames(oj_T %>% select(-c(logmove, P_Trop))))
M_df = double_ml_data_from_data_frame(oj_M,
y_col='logmove',
d_cols='P_MM',
x_cols=colnames(oj_M %>% select(-c(logmove, P_MM))))
set.seed(1)
# Xgboost learners
ml_l_rf = lrn("regr.ranger", max.depth = 7,
mtry = 3, min.node.size =3)
ml_m_rf = lrn("regr.ranger", max.depth = 5,
mtry = 4, min.node.size = 7)
# Default values
D_dml_plr_rf = DoubleMLPLR$new(D_df,
ml_l = ml_l_rf,
ml_m = ml_m_rf)
T_dml_plr_rf = DoubleMLPLR$new(T_df,
ml_l = ml_l_rf,
ml_m = ml_m_rf)
M_dml_plr_rf = DoubleMLPLR$new(M_df,
ml_l = ml_l_rf,
ml_m = ml_m_rf)
# Estimation
D_dml_plr_rf$fit()
# Coefficient estimate
D_dml_plr_rf$coef
# Standard error
D_dml_plr_rf$se
# Summary
D_dml_plr_rf$summary()
# Estimation
T_dml_plr_rf$fit()
# Coefficient estimate
T_dml_plr_rf$coef
# Standard error
T_dml_plr_rf$se
# Summary
T_dml_plr_rf$summary()
# Estimation
M_dml_plr_rf$fit()
# Coefficient estimate
M_dml_plr_rf$coef
# Standard error
M_dml_plr_rf$se
# Summary
M_dml_plr_rf$summary()
# Summary
D_dml_plr_rf$summary()
# Confidence intervals
D_dml_plr_rf$confint()
# Multiplier bootstrap (relevant in case with multiple treatment variables)
D_dml_plr_rf$bootstrap()
# Simultaneous confidence bands
D_dml_plr_rf$confint(joint = TRUE)
# Summary
T_dml_plr_rf$summary()
# Confidence intervals
T_dml_plr_rf$confint()
# Multiplier bootstrap (relevant in case with multiple treatment variables)
T_dml_plr_rf$bootstrap()
# Simultaneous confidence bands
T_dml_plr_rf$confint(joint = TRUE)
# Summary
M_dml_plr_rf$summary()
# Confidence intervals
M_dml_plr_rf$confint()
# Multiplier bootstrap (relevant in case with multiple treatment variables)
M_dml_plr_rf$bootstrap()
# Simultaneous confidence bands
M_dml_plr_rf$confint(joint = TRUE)
D_df = double_ml_data_from_data_frame(oj_D,
y_col='logmove',
d_cols=c('P_Dom', 'P_Trop', 'P_MM'),
x_cols=colnames(oj_D %>% select(-c(logmove, P_Dom, P_Trop, P_MM))))
D_df = double_ml_data_from_data_frame(oj_D,
y_col='logmove',
d_cols=c('P_Dom', 'P_Trop', 'P_MM'),
)
T_df = double_ml_data_from_data_frame(oj_T,
y_col='logmove',
d_cols=c('P_Dom', 'P_Trop', 'P_MM'),
)
M_df = double_ml_data_from_data_frame(oj_M,
y_col='logmove',
d_cols=c('P_Dom', 'P_Trop', 'P_MM'),
)
set.seed(1)
# Xgboost learners
ml_l_rf = lrn("regr.ranger", max.depth = 7,
mtry = 3, min.node.size =3)
ml_m_rf = lrn("regr.ranger", max.depth = 5,
mtry = 4, min.node.size = 7)
# Default values
D_dml_plr_rf = DoubleMLPLR$new(D_df,
ml_l = ml_l_rf,
ml_m = ml_m_rf)
T_dml_plr_rf = DoubleMLPLR$new(T_df,
ml_l = ml_l_rf,
ml_m = ml_m_rf)
M_dml_plr_rf = DoubleMLPLR$new(M_df,
ml_l = ml_l_rf,
ml_m = ml_m_rf)
# Estimation
D_dml_plr_rf$fit()
# Coefficient estimate
D_dml_plr_rf$coef
# Standard error
D_dml_plr_rf$se
# Summary
D_dml_plr_rf$summary()
# Summary
D_dml_plr_rf$summary()
# Confidence intervals
D_dml_plr_rf$confint()
# Multiplier bootstrap (relevant in case with multiple treatment variables)
D_dml_plr_rf$bootstrap()
# Simultaneous confidence bands
D_dml_plr_rf$confint(joint = TRUE)
# Coefficient estimate
D_dml_plr_rf$coef
# Coefficient estimate
D_dml_plr_rf$coef["P_Dom"]
# Estimation
T_dml_plr_rf$fit()
# Coefficient estimate
T_dml_plr_rf$coef
# Standard error
T_dml_plr_rf$se
# Summary
T_dml_plr_rf$summary()
# Estimation
M_dml_plr_rf$fit()
# Coefficient estimate
M_dml_plr_rf$coef
# Standard error
M_dml_plr_rf$se
# Summary
M_dml_plr_rf$summary()
# Summary
D_dml_plr_rf$summary()
rownames = c("Q Trop", "Q MM", "Q Dom")
colnames = c("P Trop", "P MM", "P Dom")
Elast_matrix <- matrix(,3,3, dimnames = list(rownames, colnames))
#This code is a hack; it would be much better to do this assignment as a loop; that will show up in the next homework or two
Elast_matrix[1,1] <- T_dml_plr_rf$coef["P_Trop"]
Elast_matrix[1,2] <- T_dml_plr_rf$coef["P_MM"]
Elast_matrix[1,3] <- T_dml_plr_rf$coef["P_DOM"]
Elast_matrix[2,1] <- M_dml_plr_rf$coef["P_Trop"]
Elast_matrix[2,2] <- M_dml_plr_rf$coef["P_MM"]
Elast_matrix[2,3] <- M_dml_plr_rf$coef["P_DOM"]
Elast_matrix[3,1] <- D_dml_plr_rf$coef["P_Trop"]
Elast_matrix[3,2] <- D_dml_plr_rf$coef["P_MM"]
Elast_matrix[3,3] <- D_dml_plr_rf$coef["P_DOM"]
Elast_matrix
T_dml_plr_rf$coef["P_DOM"]
T_dml_plr_rf$coef
rownames = c("Q Trop", "Q MM", "Q Dom")
colnames = c("P Trop", "P MM", "P Dom")
Elast_matrix <- matrix(,3,3, dimnames = list(rownames, colnames))
#This code is a hack; it would be much better to do this assignment as a loop; that will show up in the next homework or two
Elast_matrix[1,1] <- T_dml_plr_rf$coef["P_Trop"]
Elast_matrix[1,2] <- T_dml_plr_rf$coef["P_MM"]
Elast_matrix[1,3] <- T_dml_plr_rf$coef["P_Dom"]
Elast_matrix[2,1] <- M_dml_plr_rf$coef["P_Trop"]
Elast_matrix[2,2] <- M_dml_plr_rf$coef["P_MM"]
Elast_matrix[2,3] <- M_dml_plr_rf$coef["P_Dom"]
Elast_matrix[3,1] <- D_dml_plr_rf$coef["P_Trop"]
Elast_matrix[3,2] <- D_dml_plr_rf$coef["P_MM"]
Elast_matrix[3,3] <- D_dml_plr_rf$coef["P_Dom"]
Elast_matrix
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(tidyverse)
library(broom)
library(dplyr)
library(knitr)
dim(df)
df <- read.csv("online_retail.csv")
df
d <- strptime(df$InvoiceDate, format = "%m/%d/%Y %H:%M")
d$zone <- NULL
df$InvoiceDate <- d
each_year <- df %>%
mutate(year = format(InvoiceDate, "%Y")) %>%
distinct(year)
each_year
df %>%
filter(UnitPrice < 0)
each_year <- df %>%
mutate(year = format(InvoiceDate, "%Y")) %>%
grou_by(year) %>%
filter(UnitPrice < 0)
each_year <- df %>%
mutate(year = format(InvoiceDate, "%Y")) %>%
group_by(year) %>%
filter(UnitPrice < 0)
each_year <- df %>%
mutate(year = format(InvoiceDate, "%Y"))
filter(UnitPrice < 0) %>%
select(year)
df %>%
mutate(year = format(InvoiceDate, "%Y"))
filter(UnitPrice < 0) %>%
select(year)
d <- strptime(df$InvoiceDate, format = "%m/%d/%Y %H:%M")
d$zone <- NULL
df$InvoiceDate <- as.Date(d)
df %>%
mutate(year = format(InvoiceDate, "%Y"))
filter(UnitPrice < 0)
df
df %>%
mutate(year = format(InvoiceDate, "%Y")) %>%
filter(UnitPrice < 0)
df <- read.csv("online_retail.csv")
dim(df)
df %>%
filter(UnitPrice < 0)
d <- as.Date(df$InvoiceDate, format = "%m/%d/%Y %H:%M")
df$InvoiceDate <- d
df
df <- read.csv("online_retail.csv")
dim(df)
d <- as.POSIXct(df$InvoiceDate, format = "%m/%d/%Y %H:%M")
df$InvoiceDate <- d
df %>%
filter(UnitPrice < 0)
df %>%
filter(Quantity < 0)
df %>%
filter(StockCode == "D")
discount <- df %>%
filter(StockCode == "D")
df %>%
inner_join(discount)
discount <- df %>%
filter(StockCode == "D")  %>%
select(InvoiceNo)
df %>%
inner_join(discount, by = InvoiceNo)
discount <- df %>%
filter(StockCode == "D")  %>%
select(InvoiceNo)
df %>%
inner_join(discount, by = "InvoiceNo")
discount <- df %>%
filter(StockCode == "D")  %>%
select(CustomerID)
df %>%
inner_join(discount, by = "CustomerID")
library(bayesm)
data(orangeJuice)
typeof(orangeJuice)
df <- as.data.frame(orangeJuice)
orangeJuice
data(tuna)
tuna
lapply(mylist, function(x) write.table( data.frame(x), 'test.csv'  , append= T, sep=',' ))
lapply(orangeJuice, function(x) write.table( data.frame(x), 'test.csv'  , append= T, sep=',' ))
orangeJuice
lapply(orangeJuice$storedemo, function(x) write.table( data.frame(x), 'test1.csv'  , append= T, sep=',' ))
lapply(orangeJuice$$yx, function(x) write.table( data.frame(x), 'test2.csv'  , append= T, sep=',' ))
lapply(orangeJuice$storedemo, function(x) write.table( data.frame(x), 'test1.csv'  , append= T, sep=',' ))
lapply(orangeJuice$yx, function(x) write.table( data.frame(x), 'test2.csv'  , append= T, sep=',' ))
dim(orangeJuice)
length(orangeJuice)
orangeJuice
lapply(orangeJuice, function(x) write.table( data.frame(x), 'test1.csv'  , append= T, sep=',' ))
df1 <- orangeJuice$yx
df2 <- orangeJuice$storedemo
View(df1)
View(df2)
lapply(sales_df, function(x) write.table( data.frame(x), 'sales.csv'  , append= T, sep=',' ))
lapply(store_df, function(x) write.table( data.frame(x), 'store.csv'  , append= T, sep=',' ))
sales_df <- orangeJuice$yx
store_df <- orangeJuice$storedemo
lapply(sales_df, function(x) write.table( data.frame(x), 'sales.csv'  , append= T, sep=',' ))
lapply(store_df, function(x) write.table( data.frame(x), 'store.csv'  , append= T, sep=',' ))
library(bayesm)
library(readr)
data(orangeJuice)
typeof(orangeJuice)
sales_df <- orangeJuice$yx
store_df <- orangeJuice$storedemo
readr::write_csv(sales_df, "sales.csv")
path <- getwd()
path
setwd("C:/Users/sohny/Desktop/Yeji/Doc/Assignment/ECON481/Module_draft/data_")
path <- getwd()
readr::write_csv(sales_df, concat(path, "/sales.csv")
path <- getwd()
path
readr::write_csv(sales_df, concat(path, "/sales.csv")
readr::write_csv(sales_df, concat(path, "/sales.csv"))
past(path, "/sales.csv")
paste(path, "/sales.csv")
path
paste(path, "/sales.csv", sep="")
readr::write_csv(sales_df, concat(path, path))
readr::write_csv(sales_df, path)
path <- getwd()
readr::write_csv(sales_df, path)
readr::write_csv(sales_df, "sales.csv")
readr::write_csv(store_df, "store.csv")
